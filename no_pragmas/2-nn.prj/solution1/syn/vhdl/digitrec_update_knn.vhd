-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    min_distances_V_ce0 : OUT STD_LOGIC;
    min_distances_V_we0 : OUT STD_LOGIC;
    min_distances_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    tmp_4 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec_update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv49_1FFFFFFFFFFFF : STD_LOGIC_VECTOR (48 downto 0) := "1111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal tmp_6_cast_fu_150_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_158_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal count_V_fu_170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_52 : BOOLEAN;
    signal tmp_6_i_fu_182_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_i_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_194_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_287 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal exitcond_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distances_V_addr_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal max_V_s_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_85 : BOOLEAN;
    signal i_val_V_026_s_fu_246_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal distance_V_reg_84 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_V_buf_i_reg_97 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_s_reg_106 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_026_s_reg_118 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_assign_reg_130 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_114 : BOOLEAN;
    signal tmp_1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_142_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal train_inst_V_cast_fu_154_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_5_i_fu_176_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_2_cast_fu_200_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_204_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_218_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_val_V_fu_234_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    distance_V_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_i_fu_164_p2 = ap_const_lv1_0))) then 
                distance_V_reg_84 <= count_V_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                distance_V_reg_84 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    n_V_buf_i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_i_fu_164_p2 = ap_const_lv1_0))) then 
                n_V_buf_i_reg_97 <= tmp_6_i_fu_182_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_V_buf_i_reg_97 <= r_V_fu_158_p2;
            end if; 
        end if;
    end process;

    p_s_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_i_fu_164_p2 = ap_const_lv1_0)))) then 
                p_s_reg_106 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                p_s_reg_106 <= max_V_s_fu_238_p3;
            end if; 
        end if;
    end process;

    val_assign_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_i_fu_164_p2 = ap_const_lv1_0)))) then 
                val_assign_reg_130 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                val_assign_reg_130 <= i_reg_287;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_reg_287 <= i_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_188_p2)))) then
                min_distances_V_addr_reg_297 <= tmp_7_cast_fu_223_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                p_026_s_reg_118 <= i_val_V_026_s_fu_246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_6_cast_reg_260(4 downto 1) <= tmp_6_cast_fu_150_p1(4 downto 1);
            end if;
        end if;
    end process;
    tmp_6_cast_reg_260(0) <= '0';
    tmp_6_cast_reg_260(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_i_fu_164_p2, exitcond_fu_188_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_i_fu_164_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_188_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_114 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_52_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_52 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_85 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_52)
    begin
        if (ap_sig_52) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_85)
    begin
        if (ap_sig_85) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_114)
    begin
        if (ap_sig_114) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    count_V_fu_170_p2 <= std_logic_vector(unsigned(distance_V_reg_84) + unsigned(ap_const_lv6_1));
    exitcond_fu_188_p2 <= "1" when (val_assign_reg_130 = ap_const_lv2_2) else "0";
    i_fu_194_p2 <= std_logic_vector(unsigned(val_assign_reg_130) + unsigned(ap_const_lv2_1));
    i_val_V_026_s_fu_246_p3 <= 
        i_val_V_fu_234_p1 when (tmp_3_fu_228_p2(0) = '1') else 
        p_026_s_reg_118;
    i_val_V_fu_234_p1 <= std_logic_vector(resize(unsigned(val_assign_reg_130),4));
    max_V_s_fu_238_p3 <= 
        min_distances_V_q0 when (tmp_3_fu_228_p2(0) = '1') else 
        p_s_reg_106;

    min_distances_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_188_p2, min_distances_V_addr_reg_297, tmp_8_cast_fu_209_p1, tmp_7_cast_fu_223_p1, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            min_distances_V_address0 <= min_distances_V_addr_reg_297;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_188_p2)))) then 
            min_distances_V_address0 <= tmp_7_cast_fu_223_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_188_p2))) then 
            min_distances_V_address0 <= tmp_8_cast_fu_209_p1(5 - 1 downto 0);
        else 
            min_distances_V_address0 <= "XXXXX";
        end if; 
    end process;


    min_distances_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_188_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_188_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_188_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            min_distances_V_ce0 <= ap_const_logic_1;
        else 
            min_distances_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_distances_V_d0 <= distance_V_reg_84;

    min_distances_V_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_1_fu_254_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_1_fu_254_p2))))) then 
            min_distances_V_we0 <= ap_const_logic_1;
        else 
            min_distances_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_158_p2 <= (train_inst_V_cast_fu_154_p1 xor test_inst_V);
    tmp_1_fu_254_p2 <= "1" when (unsigned(distance_V_reg_84) < unsigned(min_distances_V_q0)) else "0";
    tmp_2_cast_fu_200_p1 <= std_logic_vector(resize(unsigned(val_assign_reg_130),6));
    tmp_3_fu_228_p2 <= "1" when (unsigned(min_distances_V_q0) > unsigned(p_s_reg_106)) else "0";
    tmp_5_fu_142_p3 <= (tmp_4 & ap_const_lv1_0);
    tmp_5_i_fu_176_p2 <= std_logic_vector(unsigned(n_V_buf_i_reg_97) + unsigned(ap_const_lv49_1FFFFFFFFFFFF));
    tmp_6_cast_fu_150_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_142_p3),6));
    tmp_6_i_fu_182_p2 <= (tmp_5_i_fu_176_p2 and n_V_buf_i_reg_97);
    tmp_7_cast_fu_223_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_218_p2),64));
    tmp_7_fu_218_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_260) + unsigned(tmp_cast_fu_214_p1));
    tmp_8_cast_fu_209_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_204_p2),64));
    tmp_8_fu_204_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_260) + unsigned(tmp_2_cast_fu_200_p1));
    tmp_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(p_026_s_reg_118),6));
    tmp_i_fu_164_p2 <= "1" when (n_V_buf_i_reg_97 = ap_const_lv49_0) else "0";
    train_inst_V_cast_fu_154_p1 <= std_logic_vector(resize(unsigned(train_inst_V),49));
end behav;
