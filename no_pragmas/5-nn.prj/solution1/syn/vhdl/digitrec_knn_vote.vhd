-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    knn_set_V_ce0 : OUT STD_LOGIC;
    knn_set_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec_knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_21 : BOOLEAN;
    signal i_V_fu_119_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_40 : BOOLEAN;
    signal tmp_1_fu_141_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_217 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_153_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_55 : BOOLEAN;
    signal exitcond_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_0_agg_result_V_s_fu_183_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_2_min_fu_191_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_75 : BOOLEAN;
    signal agg_result_V_s_reg_54 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_val_V_reg_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal min_1_reg_101 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_129_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_125_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_137_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_159_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal min_1_cast_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_199_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_113_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= agg_result_V_s_reg_54;
                end if; 
            end if;
        end if;
    end process;


    i_val_V_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_147_p2)))) then 
                i_val_V_reg_66 <= i_V_reg_212;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_val_V_reg_66 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    min_1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                min_1_reg_101 <= sum_fu_203_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_113_p2 = ap_const_lv1_0))) then 
                min_1_reg_101 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    min_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_147_p2)))) then 
                min_reg_78 <= min_2_min_fu_191_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                min_reg_78 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    p_1_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                p_1_reg_90 <= j_V_reg_225;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_113_p2 = ap_const_lv1_0))) then 
                p_1_reg_90 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_147_p2)))) then
                agg_result_V_s_reg_54 <= agg_result_V_0_agg_result_V_s_fu_183_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_V_reg_212 <= i_V_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_V_reg_225 <= j_V_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_113_p2 = ap_const_lv1_0))) then
                tmp_1_reg_217 <= tmp_1_fu_141_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_113_p2, exitcond_fu_147_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_113_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_147_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    agg_result_V_0_agg_result_V_s_fu_183_p3 <= 
        i_val_V_reg_66 when (tmp_6_fu_177_p2(0) = '1') else 
        agg_result_V_s_reg_54;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_113_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_113_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_113_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_113_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_113_p2, agg_result_V_s_reg_54, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_113_p2 = ap_const_lv1_0)))) then 
            ap_return <= agg_result_V_s_reg_54;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_40 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_55 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_75 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_21)
    begin
        if (ap_sig_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_40)
    begin
        if (ap_sig_40) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_55)
    begin
        if (ap_sig_55) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_75)
    begin
        if (ap_sig_75) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_113_p2 <= "1" when (i_val_V_reg_66 = ap_const_lv4_A) else "0";
    exitcond_fu_147_p2 <= "1" when (p_1_reg_90 = ap_const_lv3_5) else "0";
    i_V_fu_119_p2 <= std_logic_vector(unsigned(i_val_V_reg_66) + unsigned(ap_const_lv4_1));
    j_V_fu_153_p2 <= std_logic_vector(unsigned(p_1_reg_90) + unsigned(ap_const_lv3_1));
    knn_set_V_address0 <= tmp_12_cast_fu_168_p1(6 - 1 downto 0);

    knn_set_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            knn_set_V_ce0 <= ap_const_logic_1;
        else 
            knn_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_1_cast_fu_173_p1 <= std_logic_vector(resize(unsigned(min_1_reg_101),32));
    min_2_min_fu_191_p3 <= 
        min_1_cast_fu_173_p1 when (tmp_6_fu_177_p2(0) = '1') else 
        min_reg_78;
    p_shl_cast_fu_137_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_129_p3),7));
    sum_fu_203_p2 <= std_logic_vector(unsigned(min_1_reg_101) + unsigned(tmp_8_cast_fu_199_p1));
    tmp_12_cast_fu_168_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_163_p2),64));
    tmp_1_fu_141_p2 <= std_logic_vector(unsigned(tmp_cast_fu_125_p1) + unsigned(p_shl_cast_fu_137_p1));
    tmp_2_fu_163_p2 <= std_logic_vector(unsigned(tmp_1_reg_217) + unsigned(tmp_7_cast_fu_159_p1));
    tmp_6_fu_177_p2 <= "1" when (signed(min_1_cast_fu_173_p1) < signed(min_reg_78)) else "0";
    tmp_7_cast_fu_159_p1 <= std_logic_vector(resize(unsigned(p_1_reg_90),7));
    tmp_8_cast_fu_199_p1 <= std_logic_vector(resize(unsigned(knn_set_V_q0),9));
    tmp_cast_fu_125_p1 <= std_logic_vector(resize(unsigned(i_val_V_reg_66),7));
    tmp_s_fu_129_p3 <= (i_val_V_reg_66 & ap_const_lv2_0);
end behav;
