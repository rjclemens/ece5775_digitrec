// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module digitrec_knn_vote (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set_V_address0,
        knn_set_V_ce0,
        knn_set_V_q0,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_7FFFFFFF = 32'b1111111111111111111111111111111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] knn_set_V_address0;
output   knn_set_V_ce0;
input  [5:0] knn_set_V_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg knn_set_V_ce0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
wire   [3:0] i_V_fu_119_p2;
reg   [3:0] i_V_reg_202;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_40;
wire   [6:0] tmp_10_cast_fu_133_p1;
reg   [6:0] tmp_10_cast_reg_207;
wire   [0:0] exitcond1_fu_113_p2;
wire   [2:0] j_V_fu_143_p2;
reg   [2:0] j_V_reg_215;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_55;
wire   [0:0] exitcond_fu_137_p2;
wire   [3:0] agg_result_V_0_agg_result_V_s_fu_173_p3;
wire   [31:0] min_2_min_fu_181_p3;
wire   [7:0] sum_fu_193_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_75;
reg   [3:0] agg_result_V_s_reg_54;
reg   [3:0] i_val_V_reg_66;
reg   [31:0] min_reg_78;
reg   [2:0] p_1_reg_90;
reg   [7:0] min_1_reg_101;
wire   [63:0] tmp_11_cast_fu_158_p1;
wire   [5:0] tmp_fu_125_p3;
wire   [6:0] tmp_7_cast_fu_149_p1;
wire   [6:0] tmp_s_fu_153_p2;
wire   [31:0] min_1_cast_fu_163_p1;
wire   [0:0] tmp_6_fu_167_p2;
wire   [7:0] tmp_8_cast_fu_189_p1;
reg   [3:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_return_preg = 4'b0000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv4_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_113_p2 == 1'b0))) begin
            ap_return_preg <= agg_result_V_s_reg_54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_137_p2))) begin
        i_val_V_reg_66 <= i_V_reg_202;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_val_V_reg_66 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        min_1_reg_101 <= sum_fu_193_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_113_p2 == 1'b0))) begin
        min_1_reg_101 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_137_p2))) begin
        min_reg_78 <= min_2_min_fu_181_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        min_reg_78 <= ap_const_lv32_7FFFFFFF;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        p_1_reg_90 <= j_V_reg_215;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_113_p2 == 1'b0))) begin
        p_1_reg_90 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_137_p2))) begin
        agg_result_V_s_reg_54 <= agg_result_V_0_agg_result_V_s_fu_173_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_V_reg_202 <= i_V_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_V_reg_215 <= j_V_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_113_p2 == 1'b0))) begin
        tmp_10_cast_reg_207[5 : 2] <= tmp_10_cast_fu_133_p1[5 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_113_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_113_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_113_p2 == 1'b0))) begin
        ap_return = agg_result_V_s_reg_54;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_40) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_55) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_75) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        knn_set_V_ce0 = 1'b1;
    end else begin
        knn_set_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_113_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond_fu_137_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_0_agg_result_V_s_fu_173_p3 = ((tmp_6_fu_167_p2[0:0] === 1'b1) ? i_val_V_reg_66 : agg_result_V_s_reg_54);

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_40 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_55 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_75 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign exitcond1_fu_113_p2 = ((i_val_V_reg_66 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond_fu_137_p2 = ((p_1_reg_90 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_V_fu_119_p2 = (i_val_V_reg_66 + ap_const_lv4_1);

assign j_V_fu_143_p2 = (p_1_reg_90 + ap_const_lv3_1);

assign knn_set_V_address0 = tmp_11_cast_fu_158_p1;

assign min_1_cast_fu_163_p1 = min_1_reg_101;

assign min_2_min_fu_181_p3 = ((tmp_6_fu_167_p2[0:0] === 1'b1) ? min_1_cast_fu_163_p1 : min_reg_78);

assign sum_fu_193_p2 = (min_1_reg_101 + tmp_8_cast_fu_189_p1);

assign tmp_10_cast_fu_133_p1 = tmp_fu_125_p3;

assign tmp_11_cast_fu_158_p1 = tmp_s_fu_153_p2;

assign tmp_6_fu_167_p2 = (($signed(min_1_cast_fu_163_p1) < $signed(min_reg_78)) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_149_p1 = p_1_reg_90;

assign tmp_8_cast_fu_189_p1 = knn_set_V_q0;

assign tmp_fu_125_p3 = {{i_val_V_reg_66}, {ap_const_lv2_0}};

assign tmp_s_fu_153_p2 = (tmp_10_cast_reg_207 + tmp_7_cast_fu_149_p1);

always @ (posedge ap_clk) begin
    tmp_10_cast_reg_207[1:0] <= 2'b00;
    tmp_10_cast_reg_207[6] <= 1'b0;
end

endmodule //digitrec_knn_vote
