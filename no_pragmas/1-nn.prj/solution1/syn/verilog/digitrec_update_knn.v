// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module digitrec_update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst_V,
        train_inst_V,
        min_distances_0_V_address0,
        min_distances_0_V_ce0,
        min_distances_0_V_we0,
        min_distances_0_V_d0,
        min_distances_0_V_q0,
        tmp_4
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv49_0 = 49'b0000000000000000000000000000000000000000000000000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv49_1FFFFFFFFFFFF = 49'b1111111111111111111111111111111111111111111111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] test_inst_V;
input  [47:0] train_inst_V;
output  [3:0] min_distances_0_V_address0;
output   min_distances_0_V_ce0;
output   min_distances_0_V_we0;
output  [5:0] min_distances_0_V_d0;
input  [5:0] min_distances_0_V_q0;
input  [3:0] tmp_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] min_distances_0_V_address0;
reg min_distances_0_V_ce0;
reg min_distances_0_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
wire   [63:0] tmp_4_cast_fu_80_p1;
reg   [63:0] tmp_4_cast_reg_124;
wire   [48:0] r_V_fu_88_p2;
wire   [5:0] count_V_fu_100_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_50;
wire   [48:0] tmp_6_i_fu_112_p2;
wire   [0:0] tmp_i_fu_94_p2;
reg   [3:0] min_distances_0_V_addr_reg_147;
reg   [5:0] distance_V_reg_58;
reg   [48:0] n_V_buf_i_reg_71;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_75;
wire   [0:0] tmp_1_fu_118_p2;
wire   [48:0] train_inst_V_cast_fu_84_p1;
wire   [48:0] tmp_5_i_fu_106_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_i_fu_94_p2 == 1'b0))) begin
        distance_V_reg_58 <= count_V_fu_100_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        distance_V_reg_58 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_i_fu_94_p2 == 1'b0))) begin
        n_V_buf_i_reg_71 <= tmp_6_i_fu_112_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_V_buf_i_reg_71 <= r_V_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_i_fu_94_p2 == 1'b0))) begin
        min_distances_0_V_addr_reg_147 <= tmp_4_cast_reg_124;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_4_cast_reg_124[3 : 0] <= tmp_4_cast_fu_80_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_50) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_75) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        min_distances_0_V_address0 = min_distances_0_V_addr_reg_147;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        min_distances_0_V_address0 = tmp_4_cast_reg_124;
    end else begin
        min_distances_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        min_distances_0_V_ce0 = 1'b1;
    end else begin
        min_distances_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_1_fu_118_p2))) begin
        min_distances_0_V_we0 = 1'b1;
    end else begin
        min_distances_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_i_fu_94_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_50 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_75 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign count_V_fu_100_p2 = (distance_V_reg_58 + ap_const_lv6_1);

assign min_distances_0_V_d0 = distance_V_reg_58;

assign r_V_fu_88_p2 = (train_inst_V_cast_fu_84_p1 ^ test_inst_V);

assign tmp_1_fu_118_p2 = ((distance_V_reg_58 < min_distances_0_V_q0) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_80_p1 = tmp_4;

assign tmp_5_i_fu_106_p2 = ($signed(n_V_buf_i_reg_71) + $signed(ap_const_lv49_1FFFFFFFFFFFF));

assign tmp_6_i_fu_112_p2 = (tmp_5_i_fu_106_p2 & n_V_buf_i_reg_71);

assign tmp_i_fu_94_p2 = ((n_V_buf_i_reg_71 == ap_const_lv49_0) ? 1'b1 : 1'b0);

assign train_inst_V_cast_fu_84_p1 = train_inst_V;

always @ (posedge ap_clk) begin
    tmp_4_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //digitrec_update_knn
