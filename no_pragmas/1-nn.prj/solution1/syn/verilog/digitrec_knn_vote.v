// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module digitrec_knn_vote (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set_0_V_address0,
        knn_set_0_V_ce0,
        knn_set_0_V_q0,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_7FFFFFFF = 32'b1111111111111111111111111111111;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] knn_set_0_V_address0;
output   knn_set_0_V_ce0;
input  [5:0] knn_set_0_V_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg knn_set_0_V_ce0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
wire   [3:0] i_V_fu_76_p2;
reg   [3:0] i_V_reg_116;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_39;
wire   [0:0] exitcond_fu_70_p2;
wire   [3:0] agg_result_V_0_agg_result_V_s_fu_97_p3;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_54;
wire   [31:0] min_2_min_fu_105_p3;
reg   [3:0] agg_result_V_s_reg_34;
reg   [3:0] i_val_V_reg_46;
reg   [31:0] min_reg_58;
wire   [63:0] tmp_fu_82_p1;
wire   [31:0] tmp_6_fu_87_p1;
wire   [0:0] tmp_8_fu_91_p2;
reg   [3:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_return_preg = 4'b0000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv4_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_70_p2 == 1'b0))) begin
            ap_return_preg <= agg_result_V_s_reg_34;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_val_V_reg_46 <= i_V_reg_116;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_val_V_reg_46 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        min_reg_58 <= min_2_min_fu_105_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        min_reg_58 <= ap_const_lv32_7FFFFFFF;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        agg_result_V_s_reg_34 <= agg_result_V_0_agg_result_V_s_fu_97_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_V_reg_116 <= i_V_fu_76_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_70_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_70_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_70_p2 == 1'b0))) begin
        ap_return = agg_result_V_s_reg_34;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_39) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_54) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        knn_set_0_V_ce0 = 1'b1;
    end else begin
        knn_set_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_fu_70_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_0_agg_result_V_s_fu_97_p3 = ((tmp_8_fu_91_p2[0:0] === 1'b1) ? i_val_V_reg_46 : agg_result_V_s_reg_34);

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_39 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_54 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond_fu_70_p2 = ((i_val_V_reg_46 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign i_V_fu_76_p2 = (i_val_V_reg_46 + ap_const_lv4_1);

assign knn_set_0_V_address0 = tmp_fu_82_p1;

assign min_2_min_fu_105_p3 = ((tmp_8_fu_91_p2[0:0] === 1'b1) ? tmp_6_fu_87_p1 : min_reg_58);

assign tmp_6_fu_87_p1 = knn_set_0_V_q0;

assign tmp_8_fu_91_p2 = (($signed(tmp_6_fu_87_p1) < $signed(min_reg_58)) ? 1'b1 : 1'b0);

assign tmp_fu_82_p1 = i_val_V_reg_46;

endmodule //digitrec_knn_vote
