// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitrec_knn_vote.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic digitrec_knn_vote::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic digitrec_knn_vote::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> digitrec_knn_vote::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> digitrec_knn_vote::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> digitrec_knn_vote::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> digitrec_knn_vote::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> digitrec_knn_vote::ap_const_lv1_1 = "1";
const sc_lv<32> digitrec_knn_vote::ap_const_lv32_1 = "1";
const sc_lv<1> digitrec_knn_vote::ap_const_lv1_0 = "0";
const sc_lv<32> digitrec_knn_vote::ap_const_lv32_2 = "10";
const sc_lv<4> digitrec_knn_vote::ap_const_lv4_0 = "0000";
const sc_lv<32> digitrec_knn_vote::ap_const_lv32_7FFFFFFF = "1111111111111111111111111111111";
const sc_lv<4> digitrec_knn_vote::ap_const_lv4_A = "1010";
const sc_lv<4> digitrec_knn_vote::ap_const_lv4_1 = "1";

digitrec_knn_vote::digitrec_knn_vote(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_0_agg_result_V_s_fu_97_p3);
    sensitive << ( agg_result_V_s_reg_34 );
    sensitive << ( i_val_V_reg_46 );
    sensitive << ( tmp_8_fu_91_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_70_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_70_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_70_p2 );
    sensitive << ( agg_result_V_s_reg_34 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_39 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_54 );

    SC_METHOD(thread_exitcond_fu_70_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_val_V_reg_46 );

    SC_METHOD(thread_i_V_fu_76_p2);
    sensitive << ( i_val_V_reg_46 );

    SC_METHOD(thread_knn_set_0_V_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_82_p1 );

    SC_METHOD(thread_knn_set_0_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_min_2_min_fu_105_p3);
    sensitive << ( min_reg_58 );
    sensitive << ( tmp_6_fu_87_p1 );
    sensitive << ( tmp_8_fu_91_p2 );

    SC_METHOD(thread_tmp_6_fu_87_p1);
    sensitive << ( knn_set_0_V_q0 );

    SC_METHOD(thread_tmp_8_fu_91_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( min_reg_58 );
    sensitive << ( tmp_6_fu_87_p1 );

    SC_METHOD(thread_tmp_fu_82_p1);
    sensitive << ( i_val_V_reg_46 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_70_p2 );

    ap_CS_fsm = "001";
    ap_return_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitrec_knn_vote_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, knn_set_0_V_address0, "(port)knn_set_0_V_address0");
    sc_trace(mVcdFile, knn_set_0_V_ce0, "(port)knn_set_0_V_ce0");
    sc_trace(mVcdFile, knn_set_0_V_q0, "(port)knn_set_0_V_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, i_V_fu_76_p2, "i_V_fu_76_p2");
    sc_trace(mVcdFile, i_V_reg_116, "i_V_reg_116");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_39, "ap_sig_39");
    sc_trace(mVcdFile, exitcond_fu_70_p2, "exitcond_fu_70_p2");
    sc_trace(mVcdFile, agg_result_V_0_agg_result_V_s_fu_97_p3, "agg_result_V_0_agg_result_V_s_fu_97_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_54, "ap_sig_54");
    sc_trace(mVcdFile, min_2_min_fu_105_p3, "min_2_min_fu_105_p3");
    sc_trace(mVcdFile, agg_result_V_s_reg_34, "agg_result_V_s_reg_34");
    sc_trace(mVcdFile, i_val_V_reg_46, "i_val_V_reg_46");
    sc_trace(mVcdFile, min_reg_58, "min_reg_58");
    sc_trace(mVcdFile, tmp_fu_82_p1, "tmp_fu_82_p1");
    sc_trace(mVcdFile, tmp_6_fu_87_p1, "tmp_6_fu_87_p1");
    sc_trace(mVcdFile, tmp_8_fu_91_p2, "tmp_8_fu_91_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

digitrec_knn_vote::~digitrec_knn_vote() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void digitrec_knn_vote::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv4_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !esl_seteq<1,1,1>(exitcond_fu_70_p2.read(), ap_const_lv1_0))) {
            ap_return_preg = agg_result_V_s_reg_34.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        i_val_V_reg_46 = i_V_reg_116.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_val_V_reg_46 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        min_reg_58 = min_2_min_fu_105_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        min_reg_58 = ap_const_lv32_7FFFFFFF;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        agg_result_V_s_reg_34 = agg_result_V_0_agg_result_V_s_fu_97_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_V_reg_116 = i_V_fu_76_p2.read();
    }
}

void digitrec_knn_vote::thread_agg_result_V_0_agg_result_V_s_fu_97_p3() {
    agg_result_V_0_agg_result_V_s_fu_97_p3 = (!tmp_8_fu_91_p2.read()[0].is_01())? sc_lv<4>(): ((tmp_8_fu_91_p2.read()[0].to_bool())? i_val_V_reg_46.read(): agg_result_V_s_reg_34.read());
}

void digitrec_knn_vote::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond_fu_70_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_70_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_70_p2.read(), ap_const_lv1_0))) {
        ap_return = agg_result_V_s_reg_34.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void digitrec_knn_vote::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void digitrec_knn_vote::thread_ap_sig_39() {
    ap_sig_39 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void digitrec_knn_vote::thread_ap_sig_54() {
    ap_sig_54 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void digitrec_knn_vote::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_39.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_54.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_exitcond_fu_70_p2() {
    exitcond_fu_70_p2 = (!i_val_V_reg_46.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_val_V_reg_46.read() == ap_const_lv4_A);
}

void digitrec_knn_vote::thread_i_V_fu_76_p2() {
    i_V_fu_76_p2 = (!i_val_V_reg_46.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_val_V_reg_46.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void digitrec_knn_vote::thread_knn_set_0_V_address0() {
    knn_set_0_V_address0 =  (sc_lv<4>) (tmp_fu_82_p1.read());
}

void digitrec_knn_vote::thread_knn_set_0_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        knn_set_0_V_ce0 = ap_const_logic_1;
    } else {
        knn_set_0_V_ce0 = ap_const_logic_0;
    }
}

void digitrec_knn_vote::thread_min_2_min_fu_105_p3() {
    min_2_min_fu_105_p3 = (!tmp_8_fu_91_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_8_fu_91_p2.read()[0].to_bool())? tmp_6_fu_87_p1.read(): min_reg_58.read());
}

void digitrec_knn_vote::thread_tmp_6_fu_87_p1() {
    tmp_6_fu_87_p1 = esl_zext<32,6>(knn_set_0_V_q0.read());
}

void digitrec_knn_vote::thread_tmp_8_fu_91_p2() {
    tmp_8_fu_91_p2 = (!tmp_6_fu_87_p1.read().is_01() || !min_reg_58.read().is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_6_fu_87_p1.read()) < sc_bigint<32>(min_reg_58.read()));
}

void digitrec_knn_vote::thread_tmp_fu_82_p1() {
    tmp_fu_82_p1 = esl_zext<64,4>(i_val_V_reg_46.read());
}

void digitrec_knn_vote::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_70_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

