// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitrec_update_knn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic digitrec_update_knn::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic digitrec_update_knn::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> digitrec_update_knn::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> digitrec_update_knn::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> digitrec_update_knn::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> digitrec_update_knn::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> digitrec_update_knn::ap_const_lv1_1 = "1";
const sc_lv<32> digitrec_update_knn::ap_const_lv32_1 = "1";
const sc_lv<1> digitrec_update_knn::ap_const_lv1_0 = "0";
const sc_lv<6> digitrec_update_knn::ap_const_lv6_0 = "000000";
const sc_lv<32> digitrec_update_knn::ap_const_lv32_2 = "10";
const sc_lv<49> digitrec_update_knn::ap_const_lv49_0 = "0000000000000000000000000000000000000000000000000";
const sc_lv<6> digitrec_update_knn::ap_const_lv6_1 = "1";
const sc_lv<49> digitrec_update_knn::ap_const_lv49_1FFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111";

digitrec_update_knn::digitrec_update_knn(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_75);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_50 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_75 );

    SC_METHOD(thread_count_V_fu_100_p2);
    sensitive << ( distance_V_reg_58 );

    SC_METHOD(thread_min_distances_0_V_address0);
    sensitive << ( tmp_4_cast_reg_124 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( min_distances_0_V_addr_reg_147 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_min_distances_0_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_min_distances_0_V_d0);
    sensitive << ( distance_V_reg_58 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_min_distances_0_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_1_fu_118_p2 );

    SC_METHOD(thread_r_V_fu_88_p2);
    sensitive << ( test_inst_V );
    sensitive << ( train_inst_V_cast_fu_84_p1 );

    SC_METHOD(thread_tmp_1_fu_118_p2);
    sensitive << ( min_distances_0_V_q0 );
    sensitive << ( distance_V_reg_58 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_tmp_4_cast_fu_80_p1);
    sensitive << ( tmp_4 );

    SC_METHOD(thread_tmp_5_i_fu_106_p2);
    sensitive << ( n_V_buf_i_reg_71 );

    SC_METHOD(thread_tmp_6_i_fu_112_p2);
    sensitive << ( n_V_buf_i_reg_71 );
    sensitive << ( tmp_5_i_fu_106_p2 );

    SC_METHOD(thread_tmp_i_fu_94_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( n_V_buf_i_reg_71 );

    SC_METHOD(thread_train_inst_V_cast_fu_84_p1);
    sensitive << ( train_inst_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_i_fu_94_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitrec_update_knn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, test_inst_V, "(port)test_inst_V");
    sc_trace(mVcdFile, train_inst_V, "(port)train_inst_V");
    sc_trace(mVcdFile, min_distances_0_V_address0, "(port)min_distances_0_V_address0");
    sc_trace(mVcdFile, min_distances_0_V_ce0, "(port)min_distances_0_V_ce0");
    sc_trace(mVcdFile, min_distances_0_V_we0, "(port)min_distances_0_V_we0");
    sc_trace(mVcdFile, min_distances_0_V_d0, "(port)min_distances_0_V_d0");
    sc_trace(mVcdFile, min_distances_0_V_q0, "(port)min_distances_0_V_q0");
    sc_trace(mVcdFile, tmp_4, "(port)tmp_4");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, tmp_4_cast_fu_80_p1, "tmp_4_cast_fu_80_p1");
    sc_trace(mVcdFile, tmp_4_cast_reg_124, "tmp_4_cast_reg_124");
    sc_trace(mVcdFile, r_V_fu_88_p2, "r_V_fu_88_p2");
    sc_trace(mVcdFile, count_V_fu_100_p2, "count_V_fu_100_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_50, "ap_sig_50");
    sc_trace(mVcdFile, tmp_6_i_fu_112_p2, "tmp_6_i_fu_112_p2");
    sc_trace(mVcdFile, tmp_i_fu_94_p2, "tmp_i_fu_94_p2");
    sc_trace(mVcdFile, min_distances_0_V_addr_reg_147, "min_distances_0_V_addr_reg_147");
    sc_trace(mVcdFile, distance_V_reg_58, "distance_V_reg_58");
    sc_trace(mVcdFile, n_V_buf_i_reg_71, "n_V_buf_i_reg_71");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_75, "ap_sig_75");
    sc_trace(mVcdFile, tmp_1_fu_118_p2, "tmp_1_fu_118_p2");
    sc_trace(mVcdFile, train_inst_V_cast_fu_84_p1, "train_inst_V_cast_fu_84_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_106_p2, "tmp_5_i_fu_106_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

digitrec_update_knn::~digitrec_update_knn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void digitrec_update_knn::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_94_p2.read(), ap_const_lv1_0))) {
        distance_V_reg_58 = count_V_fu_100_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        distance_V_reg_58 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_94_p2.read(), ap_const_lv1_0))) {
        n_V_buf_i_reg_71 = tmp_6_i_fu_112_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        n_V_buf_i_reg_71 = r_V_fu_88_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_i_fu_94_p2.read(), ap_const_lv1_0))) {
        min_distances_0_V_addr_reg_147 =  (sc_lv<4>) (tmp_4_cast_reg_124.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_4_cast_reg_124 = tmp_4_cast_fu_80_p1.read();
    }
}

void digitrec_update_knn::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void digitrec_update_knn::thread_ap_sig_50() {
    ap_sig_50 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void digitrec_update_knn::thread_ap_sig_75() {
    ap_sig_75 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void digitrec_update_knn::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_50.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_75.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_count_V_fu_100_p2() {
    count_V_fu_100_p2 = (!distance_V_reg_58.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(distance_V_reg_58.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void digitrec_update_knn::thread_min_distances_0_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        min_distances_0_V_address0 = min_distances_0_V_addr_reg_147.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        min_distances_0_V_address0 =  (sc_lv<4>) (tmp_4_cast_reg_124.read());
    } else {
        min_distances_0_V_address0 = "XXXX";
    }
}

void digitrec_update_knn::thread_min_distances_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        min_distances_0_V_ce0 = ap_const_logic_1;
    } else {
        min_distances_0_V_ce0 = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_min_distances_0_V_d0() {
    min_distances_0_V_d0 = distance_V_reg_58.read();
}

void digitrec_update_knn::thread_min_distances_0_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_118_p2.read())))) {
        min_distances_0_V_we0 = ap_const_logic_1;
    } else {
        min_distances_0_V_we0 = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_r_V_fu_88_p2() {
    r_V_fu_88_p2 = (train_inst_V_cast_fu_84_p1.read() ^ test_inst_V.read());
}

void digitrec_update_knn::thread_tmp_1_fu_118_p2() {
    tmp_1_fu_118_p2 = (!distance_V_reg_58.read().is_01() || !min_distances_0_V_q0.read().is_01())? sc_lv<1>(): (sc_biguint<6>(distance_V_reg_58.read()) < sc_biguint<6>(min_distances_0_V_q0.read()));
}

void digitrec_update_knn::thread_tmp_4_cast_fu_80_p1() {
    tmp_4_cast_fu_80_p1 = esl_zext<64,4>(tmp_4.read());
}

void digitrec_update_knn::thread_tmp_5_i_fu_106_p2() {
    tmp_5_i_fu_106_p2 = (!n_V_buf_i_reg_71.read().is_01() || !ap_const_lv49_1FFFFFFFFFFFF.is_01())? sc_lv<49>(): (sc_biguint<49>(n_V_buf_i_reg_71.read()) + sc_bigint<49>(ap_const_lv49_1FFFFFFFFFFFF));
}

void digitrec_update_knn::thread_tmp_6_i_fu_112_p2() {
    tmp_6_i_fu_112_p2 = (tmp_5_i_fu_106_p2.read() & n_V_buf_i_reg_71.read());
}

void digitrec_update_knn::thread_tmp_i_fu_94_p2() {
    tmp_i_fu_94_p2 = (!n_V_buf_i_reg_71.read().is_01() || !ap_const_lv49_0.is_01())? sc_lv<1>(): sc_lv<1>(n_V_buf_i_reg_71.read() == ap_const_lv49_0);
}

void digitrec_update_knn::thread_train_inst_V_cast_fu_84_p1() {
    train_inst_V_cast_fu_84_p1 = esl_zext<49,48>(train_inst_V.read());
}

void digitrec_update_knn::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(tmp_i_fu_94_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

