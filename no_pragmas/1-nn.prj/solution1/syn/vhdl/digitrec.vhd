-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (48 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitrec,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.278000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=261,HLS_SYN_LUT=469}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal training_data_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_data_V_ce0 : STD_LOGIC;
    signal training_data_V_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_1_fu_156_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_50 : BOOLEAN;
    signal i4_cast3_fu_167_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i4_cast3_reg_224 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_59 : BOOLEAN;
    signal i_2_fu_177_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_232 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_189_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_70 : BOOLEAN;
    signal next_mul_fu_195_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_245 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal training_instance_V_reg_255 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_86 : BOOLEAN;
    signal knn_set_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal knn_set_0_V_ce0 : STD_LOGIC;
    signal knn_set_0_V_we0 : STD_LOGIC;
    signal knn_set_0_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_digitrec_update_knn_fu_135_ap_start : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_ap_done : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_ap_idle : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_ap_ready : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_min_distances_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_digitrec_update_knn_fu_135_min_distances_0_V_ce0 : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_min_distances_0_V_we0 : STD_LOGIC;
    signal grp_digitrec_update_knn_fu_135_min_distances_0_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_digitrec_knn_vote_fu_145_ap_start : STD_LOGIC;
    signal grp_digitrec_knn_vote_fu_145_ap_done : STD_LOGIC;
    signal grp_digitrec_knn_vote_fu_145_ap_idle : STD_LOGIC;
    signal grp_digitrec_knn_vote_fu_145_ap_ready : STD_LOGIC;
    signal grp_digitrec_knn_vote_fu_145_knn_set_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_digitrec_knn_vote_fu_145_knn_set_0_V_ce0 : STD_LOGIC;
    signal grp_digitrec_knn_vote_fu_145_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_reg_101 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_145 : BOOLEAN;
    signal phi_mul_reg_124 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_grp_digitrec_update_knn_fu_135_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_digitrec_knn_vote_fu_145_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_164 : BOOLEAN;
    signal tmp_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_201_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component digitrec_update_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
        train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
        min_distances_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        min_distances_0_V_ce0 : OUT STD_LOGIC;
        min_distances_0_V_we0 : OUT STD_LOGIC;
        min_distances_0_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        min_distances_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        tmp_4 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component digitrec_knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        knn_set_0_V_ce0 : OUT STD_LOGIC;
        knn_set_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component digitrec_training_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component digitrec_knn_set_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    training_data_V_U : component digitrec_training_data_V
    generic map (
        DataWidth => 48,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_address0,
        ce0 => training_data_V_ce0,
        q0 => training_data_V_q0);

    knn_set_0_V_U : component digitrec_knn_set_0_V
    generic map (
        DataWidth => 6,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => knn_set_0_V_address0,
        ce0 => knn_set_0_V_ce0,
        we0 => knn_set_0_V_we0,
        d0 => knn_set_0_V_d0,
        q0 => knn_set_0_V_q0);

    grp_digitrec_update_knn_fu_135 : component digitrec_update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_digitrec_update_knn_fu_135_ap_start,
        ap_done => grp_digitrec_update_knn_fu_135_ap_done,
        ap_idle => grp_digitrec_update_knn_fu_135_ap_idle,
        ap_ready => grp_digitrec_update_knn_fu_135_ap_ready,
        test_inst_V => input_V,
        train_inst_V => training_instance_V_reg_255,
        min_distances_0_V_address0 => grp_digitrec_update_knn_fu_135_min_distances_0_V_address0,
        min_distances_0_V_ce0 => grp_digitrec_update_knn_fu_135_min_distances_0_V_ce0,
        min_distances_0_V_we0 => grp_digitrec_update_knn_fu_135_min_distances_0_V_we0,
        min_distances_0_V_d0 => grp_digitrec_update_knn_fu_135_min_distances_0_V_d0,
        min_distances_0_V_q0 => knn_set_0_V_q0,
        tmp_4 => j_reg_112);

    grp_digitrec_knn_vote_fu_145 : component digitrec_knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_digitrec_knn_vote_fu_145_ap_start,
        ap_done => grp_digitrec_knn_vote_fu_145_ap_done,
        ap_idle => grp_digitrec_knn_vote_fu_145_ap_idle,
        ap_ready => grp_digitrec_knn_vote_fu_145_ap_ready,
        knn_set_0_V_address0 => grp_digitrec_knn_vote_fu_145_knn_set_0_V_address0,
        knn_set_0_V_ce0 => grp_digitrec_knn_vote_fu_145_knn_set_0_V_ce0,
        knn_set_0_V_q0 => knn_set_0_V_q0,
        ap_return => grp_digitrec_knn_vote_fu_145_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_digitrec_knn_vote_fu_145_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_digitrec_knn_vote_fu_145_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond2_fu_171_p2)))) then 
                    ap_reg_grp_digitrec_knn_vote_fu_145_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_digitrec_knn_vote_fu_145_ap_ready)) then 
                    ap_reg_grp_digitrec_knn_vote_fu_145_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_digitrec_update_knn_fu_135_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_digitrec_update_knn_fu_135_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_grp_digitrec_update_knn_fu_135_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_digitrec_update_knn_fu_135_ap_ready)) then 
                    ap_reg_grp_digitrec_update_knn_fu_135_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_150_p2)))) then 
                i4_reg_101 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond_fu_183_p2 = ap_const_lv1_0)))) then 
                i4_reg_101 <= i_2_reg_232;
            end if; 
        end if;
    end process;

    i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_90 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_150_p2))) then 
                i_reg_90 <= i_1_fu_156_p2;
            end if; 
        end if;
    end process;

    j_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_digitrec_update_knn_fu_135_ap_done)))) then 
                j_reg_112 <= j_1_reg_240;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_171_p2))) then 
                j_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_digitrec_update_knn_fu_135_ap_done)))) then 
                phi_mul_reg_124 <= next_mul_reg_245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_171_p2))) then 
                phi_mul_reg_124 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    i4_cast3_reg_224(10 downto 0) <= i4_cast3_fu_167_p1(10 downto 0);
                i_2_reg_232 <= i_2_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_240 <= j_1_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_fu_183_p2 = ap_const_lv1_0))) then
                next_mul_reg_245 <= next_mul_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                training_instance_V_reg_255 <= training_data_V_q0;
            end if;
        end if;
    end process;
    i4_cast3_reg_224(14 downto 11) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_183_p2, grp_digitrec_update_knn_fu_135_ap_done, grp_digitrec_knn_vote_fu_145_ap_done, exitcond1_fu_150_p2, exitcond2_fu_171_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_150_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond2_fu_171_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond_fu_183_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_digitrec_update_knn_fu_135_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_digitrec_knn_vote_fu_145_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(grp_digitrec_knn_vote_fu_145_ap_done, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_digitrec_knn_vote_fu_145_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_digitrec_knn_vote_fu_145_ap_done, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_digitrec_knn_vote_fu_145_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_digitrec_knn_vote_fu_145_ap_return;

    ap_sig_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_145 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_164 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_59 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_70 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_86 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_50)
    begin
        if (ap_sig_50) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_59)
    begin
        if (ap_sig_59) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_70)
    begin
        if (ap_sig_70) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_86)
    begin
        if (ap_sig_86) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_145)
    begin
        if (ap_sig_145) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_164)
    begin
        if (ap_sig_164) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_150_p2 <= "1" when (i_reg_90 = ap_const_lv4_A) else "0";
    exitcond2_fu_171_p2 <= "1" when (i4_reg_101 = ap_const_lv11_708) else "0";
    exitcond_fu_183_p2 <= "1" when (j_reg_112 = ap_const_lv4_A) else "0";
    grp_digitrec_knn_vote_fu_145_ap_start <= ap_reg_grp_digitrec_knn_vote_fu_145_ap_start;
    grp_digitrec_update_knn_fu_135_ap_start <= ap_reg_grp_digitrec_update_knn_fu_135_ap_start;
    i4_cast3_fu_167_p1 <= std_logic_vector(resize(unsigned(i4_reg_101),15));
    i_1_fu_156_p2 <= std_logic_vector(unsigned(i_reg_90) + unsigned(ap_const_lv4_1));
    i_2_fu_177_p2 <= std_logic_vector(unsigned(i4_reg_101) + unsigned(ap_const_lv11_1));
    j_1_fu_189_p2 <= std_logic_vector(unsigned(j_reg_112) + unsigned(ap_const_lv4_1));

    knn_set_0_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_digitrec_update_knn_fu_135_min_distances_0_V_address0, grp_digitrec_knn_vote_fu_145_knn_set_0_V_address0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, tmp_fu_162_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            knn_set_0_V_address0 <= tmp_fu_162_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            knn_set_0_V_address0 <= grp_digitrec_knn_vote_fu_145_knn_set_0_V_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            knn_set_0_V_address0 <= grp_digitrec_update_knn_fu_135_min_distances_0_V_address0;
        else 
            knn_set_0_V_address0 <= "XXXX";
        end if; 
    end process;


    knn_set_0_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_digitrec_update_knn_fu_135_min_distances_0_V_ce0, grp_digitrec_knn_vote_fu_145_knn_set_0_V_ce0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            knn_set_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            knn_set_0_V_ce0 <= grp_digitrec_knn_vote_fu_145_knn_set_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            knn_set_0_V_ce0 <= grp_digitrec_update_knn_fu_135_min_distances_0_V_ce0;
        else 
            knn_set_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_0_V_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_digitrec_update_knn_fu_135_min_distances_0_V_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            knn_set_0_V_d0 <= ap_const_lv6_32;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            knn_set_0_V_d0 <= grp_digitrec_update_knn_fu_135_min_distances_0_V_d0;
        else 
            knn_set_0_V_d0 <= "XXXXXX";
        end if; 
    end process;


    knn_set_0_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_digitrec_update_knn_fu_135_min_distances_0_V_we0, exitcond1_fu_150_p2, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_150_p2)))) then 
            knn_set_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            knn_set_0_V_we0 <= grp_digitrec_update_knn_fu_135_min_distances_0_V_we0;
        else 
            knn_set_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_195_p2 <= std_logic_vector(unsigned(phi_mul_reg_124) + unsigned(ap_const_lv15_708));
    tmp_2_fu_201_p2 <= std_logic_vector(unsigned(i4_cast3_reg_224) + unsigned(phi_mul_reg_124));
    tmp_3_fu_206_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_201_p2),64));
    tmp_fu_162_p1 <= std_logic_vector(resize(unsigned(i_reg_90),64));
    training_data_V_address0 <= tmp_3_fu_206_p1(15 - 1 downto 0);

    training_data_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            training_data_V_ce0 <= ap_const_logic_1;
        else 
            training_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
