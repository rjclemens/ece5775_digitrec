-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    min_distances_0_V_ce0 : OUT STD_LOGIC;
    min_distances_0_V_we0 : OUT STD_LOGIC;
    min_distances_0_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    tmp_4 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec_update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv49_1FFFFFFFFFFFF : STD_LOGIC_VECTOR (48 downto 0) := "1111111111111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal tmp_4_cast_fu_80_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_reg_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_88_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal count_V_fu_100_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_50 : BOOLEAN;
    signal tmp_6_i_fu_112_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_i_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distances_0_V_addr_reg_147 : STD_LOGIC_VECTOR (3 downto 0);
    signal distance_V_reg_58 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_V_buf_i_reg_71 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_75 : BOOLEAN;
    signal tmp_1_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal train_inst_V_cast_fu_84_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_5_i_fu_106_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    distance_V_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_i_fu_94_p2 = ap_const_lv1_0))) then 
                distance_V_reg_58 <= count_V_fu_100_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                distance_V_reg_58 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    n_V_buf_i_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_i_fu_94_p2 = ap_const_lv1_0))) then 
                n_V_buf_i_reg_71 <= tmp_6_i_fu_112_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_V_buf_i_reg_71 <= r_V_fu_88_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_i_fu_94_p2 = ap_const_lv1_0)))) then
                min_distances_0_V_addr_reg_147 <= tmp_4_cast_reg_124(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_4_cast_reg_124(3 downto 0) <= tmp_4_cast_fu_80_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_4_cast_reg_124(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_i_fu_94_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_i_fu_94_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_75 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_50)
    begin
        if (ap_sig_50) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_75)
    begin
        if (ap_sig_75) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    count_V_fu_100_p2 <= std_logic_vector(unsigned(distance_V_reg_58) + unsigned(ap_const_lv6_1));

    min_distances_0_V_address0_assign_proc : process(tmp_4_cast_reg_124, ap_sig_cseq_ST_st2_fsm_1, min_distances_0_V_addr_reg_147, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            min_distances_0_V_address0 <= min_distances_0_V_addr_reg_147;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            min_distances_0_V_address0 <= tmp_4_cast_reg_124(4 - 1 downto 0);
        else 
            min_distances_0_V_address0 <= "XXXX";
        end if; 
    end process;


    min_distances_0_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            min_distances_0_V_ce0 <= ap_const_logic_1;
        else 
            min_distances_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_distances_0_V_d0 <= distance_V_reg_58;

    min_distances_0_V_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_1_fu_118_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_fu_118_p2))))) then 
            min_distances_0_V_we0 <= ap_const_logic_1;
        else 
            min_distances_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_88_p2 <= (train_inst_V_cast_fu_84_p1 xor test_inst_V);
    tmp_1_fu_118_p2 <= "1" when (unsigned(distance_V_reg_58) < unsigned(min_distances_0_V_q0)) else "0";
    tmp_4_cast_fu_80_p1 <= std_logic_vector(resize(unsigned(tmp_4),64));
    tmp_5_i_fu_106_p2 <= std_logic_vector(unsigned(n_V_buf_i_reg_71) + unsigned(ap_const_lv49_1FFFFFFFFFFFF));
    tmp_6_i_fu_112_p2 <= (tmp_5_i_fu_106_p2 and n_V_buf_i_reg_71);
    tmp_i_fu_94_p2 <= "1" when (n_V_buf_i_reg_71 = ap_const_lv49_0) else "0";
    train_inst_V_cast_fu_84_p1 <= std_logic_vector(resize(unsigned(train_inst_V),49));
end behav;
