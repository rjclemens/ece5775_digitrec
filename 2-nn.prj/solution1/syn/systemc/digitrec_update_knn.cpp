// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitrec_update_knn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool digitrec_update_knn::ap_true = true;
const sc_lv<1> digitrec_update_knn::ap_const_lv1_0 = "0";
const sc_logic digitrec_update_knn::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic digitrec_update_knn::ap_const_logic_1 = sc_dt::Log_1;

digitrec_update_knn::digitrec_update_knn(sc_module_name name) : sc_module(name), mVcdFile(0) {
    distance_V_digitrec_bitcount_fu_66 = new digitrec_bitcount("distance_V_digitrec_bitcount_fu_66");
    distance_V_digitrec_bitcount_fu_66->n_V(distance_V_digitrec_bitcount_fu_66_n_V);
    distance_V_digitrec_bitcount_fu_66->ap_return(distance_V_digitrec_bitcount_fu_66_ap_return);

    SC_METHOD(thread_distance_V_digitrec_bitcount_fu_66_n_V);
    sensitive << ( test_inst_V );
    sensitive << ( train_inst_V_cast_fu_73_p1 );

    SC_METHOD(thread_min_distances_0_V_o);
    sensitive << ( min_distances_0_V_i );
    sensitive << ( distance_V_digitrec_bitcount_fu_66_ap_return );
    sensitive << ( tmp_1_fu_98_p2 );
    sensitive << ( tmp_3_1_fu_84_p2 );

    SC_METHOD(thread_min_distances_0_V_o_ap_vld);
    sensitive << ( tmp_1_fu_98_p2 );
    sensitive << ( tmp_3_1_fu_84_p2 );

    SC_METHOD(thread_min_distances_1_V_o);
    sensitive << ( min_distances_1_V_i );
    sensitive << ( distance_V_digitrec_bitcount_fu_66_ap_return );
    sensitive << ( tmp_1_fu_98_p2 );
    sensitive << ( tmp_3_1_fu_84_p2 );

    SC_METHOD(thread_min_distances_1_V_o_ap_vld);
    sensitive << ( tmp_1_fu_98_p2 );
    sensitive << ( tmp_3_1_fu_84_p2 );

    SC_METHOD(thread_min_distances_V_load3_phi_fu_90_p3);
    sensitive << ( min_distances_0_V_i );
    sensitive << ( min_distances_1_V_i );
    sensitive << ( tmp_3_1_fu_84_p2 );

    SC_METHOD(thread_tmp_1_fu_98_p2);
    sensitive << ( distance_V_digitrec_bitcount_fu_66_ap_return );
    sensitive << ( min_distances_V_load3_phi_fu_90_p3 );

    SC_METHOD(thread_tmp_3_1_fu_84_p2);
    sensitive << ( min_distances_0_V_i );
    sensitive << ( min_distances_1_V_i );

    SC_METHOD(thread_train_inst_V_cast_fu_73_p1);
    sensitive << ( train_inst_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitrec_update_knn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, test_inst_V, "(port)test_inst_V");
    sc_trace(mVcdFile, train_inst_V, "(port)train_inst_V");
    sc_trace(mVcdFile, min_distances_0_V_i, "(port)min_distances_0_V_i");
    sc_trace(mVcdFile, min_distances_0_V_o, "(port)min_distances_0_V_o");
    sc_trace(mVcdFile, min_distances_0_V_o_ap_vld, "(port)min_distances_0_V_o_ap_vld");
    sc_trace(mVcdFile, min_distances_1_V_i, "(port)min_distances_1_V_i");
    sc_trace(mVcdFile, min_distances_1_V_o, "(port)min_distances_1_V_o");
    sc_trace(mVcdFile, min_distances_1_V_o_ap_vld, "(port)min_distances_1_V_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, distance_V_digitrec_bitcount_fu_66_n_V, "distance_V_digitrec_bitcount_fu_66_n_V");
    sc_trace(mVcdFile, distance_V_digitrec_bitcount_fu_66_ap_return, "distance_V_digitrec_bitcount_fu_66_ap_return");
    sc_trace(mVcdFile, tmp_1_fu_98_p2, "tmp_1_fu_98_p2");
    sc_trace(mVcdFile, tmp_3_1_fu_84_p2, "tmp_3_1_fu_84_p2");
    sc_trace(mVcdFile, train_inst_V_cast_fu_73_p1, "train_inst_V_cast_fu_73_p1");
    sc_trace(mVcdFile, min_distances_V_load3_phi_fu_90_p3, "min_distances_V_load3_phi_fu_90_p3");
#endif

    }
}

digitrec_update_knn::~digitrec_update_knn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete distance_V_digitrec_bitcount_fu_66;
}

void digitrec_update_knn::thread_distance_V_digitrec_bitcount_fu_66_n_V() {
    distance_V_digitrec_bitcount_fu_66_n_V = (train_inst_V_cast_fu_73_p1.read() ^ test_inst_V.read());
}

void digitrec_update_knn::thread_min_distances_0_V_o() {
    if ((!esl_seteq<1,1,1>(tmp_1_fu_98_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_1_fu_84_p2.read()))) {
        min_distances_0_V_o = distance_V_digitrec_bitcount_fu_66_ap_return.read();
    } else {
        min_distances_0_V_o = min_distances_0_V_i.read();
    }
}

void digitrec_update_knn::thread_min_distances_0_V_o_ap_vld() {
    if ((!esl_seteq<1,1,1>(tmp_1_fu_98_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_1_fu_84_p2.read()))) {
        min_distances_0_V_o_ap_vld = ap_const_logic_1;
    } else {
        min_distances_0_V_o_ap_vld = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_min_distances_1_V_o() {
    if ((!esl_seteq<1,1,1>(tmp_1_fu_98_p2.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_1_fu_84_p2.read()))) {
        min_distances_1_V_o = distance_V_digitrec_bitcount_fu_66_ap_return.read();
    } else {
        min_distances_1_V_o = min_distances_1_V_i.read();
    }
}

void digitrec_update_knn::thread_min_distances_1_V_o_ap_vld() {
    if ((!esl_seteq<1,1,1>(tmp_1_fu_98_p2.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_1_fu_84_p2.read()))) {
        min_distances_1_V_o_ap_vld = ap_const_logic_1;
    } else {
        min_distances_1_V_o_ap_vld = ap_const_logic_0;
    }
}

void digitrec_update_knn::thread_min_distances_V_load3_phi_fu_90_p3() {
    min_distances_V_load3_phi_fu_90_p3 = (!tmp_3_1_fu_84_p2.read()[0].is_01())? sc_lv<6>(): ((tmp_3_1_fu_84_p2.read()[0].to_bool())? min_distances_1_V_i.read(): min_distances_0_V_i.read());
}

void digitrec_update_knn::thread_tmp_1_fu_98_p2() {
    tmp_1_fu_98_p2 = (!distance_V_digitrec_bitcount_fu_66_ap_return.read().is_01() || !min_distances_V_load3_phi_fu_90_p3.read().is_01())? sc_lv<1>(): (sc_biguint<6>(distance_V_digitrec_bitcount_fu_66_ap_return.read()) < sc_biguint<6>(min_distances_V_load3_phi_fu_90_p3.read()));
}

void digitrec_update_knn::thread_tmp_3_1_fu_84_p2() {
    tmp_3_1_fu_84_p2 = (!min_distances_1_V_i.read().is_01() || !min_distances_0_V_i.read().is_01())? sc_lv<1>(): (sc_biguint<6>(min_distances_1_V_i.read()) > sc_biguint<6>(min_distances_0_V_i.read()));
}

void digitrec_update_knn::thread_train_inst_V_cast_fu_73_p1() {
    train_inst_V_cast_fu_73_p1 = esl_zext<49,48>(train_inst_V.read());
}

}

