// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module digitrec_update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst_V,
        train_inst_V,
        min_distances_0_V_i,
        min_distances_0_V_o,
        min_distances_0_V_o_ap_vld,
        min_distances_1_V_i,
        min_distances_1_V_o,
        min_distances_1_V_o_ap_vld,
        min_distances_2_V_i,
        min_distances_2_V_o,
        min_distances_2_V_o_ap_vld,
        min_distances_3_V_i,
        min_distances_3_V_o,
        min_distances_3_V_o_ap_vld
);

parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_3 = 2'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] test_inst_V;
input  [47:0] train_inst_V;
input  [5:0] min_distances_0_V_i;
output  [5:0] min_distances_0_V_o;
output   min_distances_0_V_o_ap_vld;
input  [5:0] min_distances_1_V_i;
output  [5:0] min_distances_1_V_o;
output   min_distances_1_V_o_ap_vld;
input  [5:0] min_distances_2_V_i;
output  [5:0] min_distances_2_V_o;
output   min_distances_2_V_o_ap_vld;
input  [5:0] min_distances_3_V_i;
output  [5:0] min_distances_3_V_o;
output   min_distances_3_V_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] min_distances_0_V_o;
reg min_distances_0_V_o_ap_vld;
reg[5:0] min_distances_1_V_o;
reg min_distances_1_V_o_ap_vld;
reg[5:0] min_distances_2_V_o;
reg min_distances_2_V_o_ap_vld;
reg[5:0] min_distances_3_V_o;
reg min_distances_3_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_18;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
wire   [1:0] p_026_1_3_fu_178_p3;
wire   [0:0] tmp_1_fu_200_p2;
wire   [48:0] distance_V_digitrec_bitcount_fu_106_n_V;
wire   [5:0] distance_V_digitrec_bitcount_fu_106_ap_return;
wire   [48:0] train_inst_V_cast_fu_115_p1;
wire   [0:0] tmp_3_1_fu_126_p2;
wire   [5:0] p_030_1_1_fu_132_p3;
wire   [0:0] tmp_3_2_fu_144_p2;
wire   [5:0] p_030_1_2_fu_150_p3;
wire   [0:0] tmp_3_3_fu_158_p2;
wire   [0:0] tmp_9_fu_172_p2;
wire   [1:0] p_026_1_2_fu_164_p3;
wire   [1:0] p_026_1_1_fu_140_p1;
wire   [1:0] tmp_fu_186_p5;
wire   [5:0] tmp_fu_186_p6;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
end

digitrec_bitcount distance_V_digitrec_bitcount_fu_106(
    .n_V(distance_V_digitrec_bitcount_fu_106_n_V),
    .ap_return(distance_V_digitrec_bitcount_fu_106_ap_return)
);

digitrec_mux_4to1_sel2_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
digitrec_mux_4to1_sel2_6_1_U2(
    .din1(min_distances_0_V_i),
    .din2(min_distances_1_V_i),
    .din3(min_distances_2_V_i),
    .din4(min_distances_3_V_i),
    .din5(tmp_fu_186_p5),
    .dout(tmp_fu_186_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_start;
        end
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b0 == ap_reg_ppiten_pp0_it0) & (1'b0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_18) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_reg_ppiten_pp0_it0))) begin
        ap_sig_pprstidle_pp0 = 1'b1;
    end else begin
        ap_sig_pprstidle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_0))) begin
        min_distances_0_V_o = distance_V_digitrec_bitcount_fu_106_ap_return;
    end else begin
        min_distances_0_V_o = min_distances_0_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_0))) begin
        min_distances_0_V_o_ap_vld = 1'b1;
    end else begin
        min_distances_0_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_1))) begin
        min_distances_1_V_o = distance_V_digitrec_bitcount_fu_106_ap_return;
    end else begin
        min_distances_1_V_o = min_distances_1_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_1))) begin
        min_distances_1_V_o_ap_vld = 1'b1;
    end else begin
        min_distances_1_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_2))) begin
        min_distances_2_V_o = distance_V_digitrec_bitcount_fu_106_ap_return;
    end else begin
        min_distances_2_V_o = min_distances_2_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_2))) begin
        min_distances_2_V_o_ap_vld = 1'b1;
    end else begin
        min_distances_2_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_3))) begin
        min_distances_3_V_o = distance_V_digitrec_bitcount_fu_106_ap_return;
    end else begin
        min_distances_3_V_o = min_distances_3_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)) & ~(tmp_1_fu_200_p2 == 1'b0) & (p_026_1_3_fu_178_p3 == ap_const_lv2_3))) begin
        min_distances_3_V_o_ap_vld = 1'b1;
    end else begin
        min_distances_3_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_reg_ppiten_pp0_it0 = ap_start;

always @ (*) begin
    ap_sig_18 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign distance_V_digitrec_bitcount_fu_106_n_V = (train_inst_V_cast_fu_115_p1 ^ test_inst_V);

assign p_026_1_1_fu_140_p1 = tmp_3_1_fu_126_p2;

assign p_026_1_2_fu_164_p3 = ((tmp_3_3_fu_158_p2[0:0] === 1'b1) ? ap_const_lv2_3 : ap_const_lv2_2);

assign p_026_1_3_fu_178_p3 = ((tmp_9_fu_172_p2[0:0] === 1'b1) ? p_026_1_2_fu_164_p3 : p_026_1_1_fu_140_p1);

assign p_030_1_1_fu_132_p3 = ((tmp_3_1_fu_126_p2[0:0] === 1'b1) ? min_distances_1_V_i : min_distances_0_V_i);

assign p_030_1_2_fu_150_p3 = ((tmp_3_2_fu_144_p2[0:0] === 1'b1) ? min_distances_2_V_i : p_030_1_1_fu_132_p3);

assign tmp_1_fu_200_p2 = ((distance_V_digitrec_bitcount_fu_106_ap_return < tmp_fu_186_p6) ? 1'b1 : 1'b0);

assign tmp_3_1_fu_126_p2 = ((min_distances_1_V_i > min_distances_0_V_i) ? 1'b1 : 1'b0);

assign tmp_3_2_fu_144_p2 = ((min_distances_2_V_i > p_030_1_1_fu_132_p3) ? 1'b1 : 1'b0);

assign tmp_3_3_fu_158_p2 = ((min_distances_3_V_i > p_030_1_2_fu_150_p3) ? 1'b1 : 1'b0);

assign tmp_9_fu_172_p2 = (tmp_3_3_fu_158_p2 | tmp_3_2_fu_144_p2);

assign tmp_fu_186_p5 = ((tmp_9_fu_172_p2[0:0] === 1'b1) ? p_026_1_2_fu_164_p3 : p_026_1_1_fu_140_p1);

assign train_inst_V_cast_fu_115_p1 = train_inst_V;

endmodule //digitrec_update_knn
