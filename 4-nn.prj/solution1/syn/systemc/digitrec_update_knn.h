// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _digitrec_update_knn_HH_
#define _digitrec_update_knn_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "digitrec_bitcount.h"
#include "digitrec_mux_4to1_sel2_6_1.h"

namespace ap_rtl {

struct digitrec_update_knn : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<49> > test_inst_V;
    sc_in< sc_lv<48> > train_inst_V;
    sc_in< sc_lv<6> > min_distances_0_V_i;
    sc_out< sc_lv<6> > min_distances_0_V_o;
    sc_out< sc_logic > min_distances_0_V_o_ap_vld;
    sc_in< sc_lv<6> > min_distances_1_V_i;
    sc_out< sc_lv<6> > min_distances_1_V_o;
    sc_out< sc_logic > min_distances_1_V_o_ap_vld;
    sc_in< sc_lv<6> > min_distances_2_V_i;
    sc_out< sc_lv<6> > min_distances_2_V_o;
    sc_out< sc_logic > min_distances_2_V_o_ap_vld;
    sc_in< sc_lv<6> > min_distances_3_V_i;
    sc_out< sc_lv<6> > min_distances_3_V_o;
    sc_out< sc_logic > min_distances_3_V_o_ap_vld;


    // Module declarations
    digitrec_update_knn(sc_module_name name);
    SC_HAS_PROCESS(digitrec_update_knn);

    ~digitrec_update_knn();

    sc_trace_file* mVcdFile;

    digitrec_bitcount* distance_V_digitrec_bitcount_fu_106;
    digitrec_mux_4to1_sel2_6_1<1,1,6,6,6,6,2,6>* digitrec_mux_4to1_sel2_6_1_U2;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_0;
    sc_signal< bool > ap_sig_18;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<2> > p_026_1_3_fu_178_p3;
    sc_signal< sc_lv<1> > tmp_1_fu_200_p2;
    sc_signal< sc_lv<49> > distance_V_digitrec_bitcount_fu_106_n_V;
    sc_signal< sc_lv<6> > distance_V_digitrec_bitcount_fu_106_ap_return;
    sc_signal< sc_lv<49> > train_inst_V_cast_fu_115_p1;
    sc_signal< sc_lv<1> > tmp_3_1_fu_126_p2;
    sc_signal< sc_lv<6> > p_030_1_1_fu_132_p3;
    sc_signal< sc_lv<1> > tmp_3_2_fu_144_p2;
    sc_signal< sc_lv<6> > p_030_1_2_fu_150_p3;
    sc_signal< sc_lv<1> > tmp_3_3_fu_158_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_172_p2;
    sc_signal< sc_lv<2> > p_026_1_2_fu_164_p3;
    sc_signal< sc_lv<2> > p_026_1_1_fu_140_p1;
    sc_signal< sc_lv<2> > tmp_fu_186_p5;
    sc_signal< sc_lv<6> > tmp_fu_186_p6;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_sig_18();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_distance_V_digitrec_bitcount_fu_106_n_V();
    void thread_min_distances_0_V_o();
    void thread_min_distances_0_V_o_ap_vld();
    void thread_min_distances_1_V_o();
    void thread_min_distances_1_V_o_ap_vld();
    void thread_min_distances_2_V_o();
    void thread_min_distances_2_V_o_ap_vld();
    void thread_min_distances_3_V_o();
    void thread_min_distances_3_V_o_ap_vld();
    void thread_p_026_1_1_fu_140_p1();
    void thread_p_026_1_2_fu_164_p3();
    void thread_p_026_1_3_fu_178_p3();
    void thread_p_030_1_1_fu_132_p3();
    void thread_p_030_1_2_fu_150_p3();
    void thread_tmp_1_fu_200_p2();
    void thread_tmp_3_1_fu_126_p2();
    void thread_tmp_3_2_fu_144_p2();
    void thread_tmp_3_3_fu_158_p2();
    void thread_tmp_9_fu_172_p2();
    void thread_tmp_fu_186_p5();
    void thread_train_inst_V_cast_fu_115_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
