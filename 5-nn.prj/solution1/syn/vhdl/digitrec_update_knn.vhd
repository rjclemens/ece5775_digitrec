-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_0_V_i : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_0_V_o : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_0_V_o_ap_vld : OUT STD_LOGIC;
    min_distances_1_V_i : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_1_V_o : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_1_V_o_ap_vld : OUT STD_LOGIC;
    min_distances_2_V_i : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_2_V_o : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_2_V_o_ap_vld : OUT STD_LOGIC;
    min_distances_3_V_i : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_3_V_o : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_3_V_o_ap_vld : OUT STD_LOGIC;
    min_distances_4_V_i : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_4_V_o : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_4_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of digitrec_update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal p_026_1_4_fu_224_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_V_digitrec_bitcount_fu_125_n_V : STD_LOGIC_VECTOR (48 downto 0);
    signal distance_V_digitrec_bitcount_fu_125_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal train_inst_V_cast_fu_135_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_3_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_030_1_1_fu_152_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_2_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_026_1_1_cast_fu_160_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_026_1_2_fu_178_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_030_1_2_fu_170_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_3_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_030_1_3_fu_196_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_4_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_026_1_3_fu_210_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_026_1_2_cast_fu_186_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_232_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_232_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component digitrec_bitcount IS
    port (
        n_V : IN STD_LOGIC_VECTOR (48 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component digitrec_mux_5to1_sel3_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        din5 : IN STD_LOGIC_VECTOR (5 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    distance_V_digitrec_bitcount_fu_125 : component digitrec_bitcount
    port map (
        n_V => distance_V_digitrec_bitcount_fu_125_n_V,
        ap_return => distance_V_digitrec_bitcount_fu_125_ap_return);

    digitrec_mux_5to1_sel3_6_1_U2 : component digitrec_mux_5to1_sel3_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 6,
        din5_WIDTH => 6,
        din6_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        din1 => min_distances_0_V_i,
        din2 => min_distances_1_V_i,
        din3 => min_distances_2_V_i,
        din4 => min_distances_3_V_i,
        din5 => min_distances_4_V_i,
        din6 => tmp_fu_232_p6,
        dout => tmp_fu_232_p7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;

    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    distance_V_digitrec_bitcount_fu_125_n_V <= (train_inst_V_cast_fu_135_p1 xor test_inst_V);

    min_distances_0_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, min_distances_0_V_i, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2, distance_V_digitrec_bitcount_fu_125_ap_return)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_0))) then 
            min_distances_0_V_o <= distance_V_digitrec_bitcount_fu_125_ap_return;
        else 
            min_distances_0_V_o <= min_distances_0_V_i;
        end if; 
    end process;


    min_distances_0_V_o_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_0))) then 
            min_distances_0_V_o_ap_vld <= ap_const_logic_1;
        else 
            min_distances_0_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_1_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, min_distances_1_V_i, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2, distance_V_digitrec_bitcount_fu_125_ap_return)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_1))) then 
            min_distances_1_V_o <= distance_V_digitrec_bitcount_fu_125_ap_return;
        else 
            min_distances_1_V_o <= min_distances_1_V_i;
        end if; 
    end process;


    min_distances_1_V_o_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_1))) then 
            min_distances_1_V_o_ap_vld <= ap_const_logic_1;
        else 
            min_distances_1_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_2_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, min_distances_2_V_i, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2, distance_V_digitrec_bitcount_fu_125_ap_return)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_2))) then 
            min_distances_2_V_o <= distance_V_digitrec_bitcount_fu_125_ap_return;
        else 
            min_distances_2_V_o <= min_distances_2_V_i;
        end if; 
    end process;


    min_distances_2_V_o_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_2))) then 
            min_distances_2_V_o_ap_vld <= ap_const_logic_1;
        else 
            min_distances_2_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_3_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, min_distances_3_V_i, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2, distance_V_digitrec_bitcount_fu_125_ap_return)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_3))) then 
            min_distances_3_V_o <= distance_V_digitrec_bitcount_fu_125_ap_return;
        else 
            min_distances_3_V_o <= min_distances_3_V_i;
        end if; 
    end process;


    min_distances_3_V_o_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and (p_026_1_4_fu_224_p3 = ap_const_lv3_3))) then 
            min_distances_3_V_o_ap_vld <= ap_const_logic_1;
        else 
            min_distances_3_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_4_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, min_distances_4_V_i, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2, distance_V_digitrec_bitcount_fu_125_ap_return)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_0)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_1)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_2)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_3)))) then 
            min_distances_4_V_o <= distance_V_digitrec_bitcount_fu_125_ap_return;
        else 
            min_distances_4_V_o <= min_distances_4_V_i;
        end if; 
    end process;


    min_distances_4_V_o_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, p_026_1_4_fu_224_p3, tmp_1_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_1_fu_248_p2 = ap_const_lv1_0)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_0)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_1)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_2)) and not((p_026_1_4_fu_224_p3 = ap_const_lv3_3)))) then 
            min_distances_4_V_o_ap_vld <= ap_const_logic_1;
        else 
            min_distances_4_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_026_1_1_cast_fu_160_p1 <= std_logic_vector(resize(unsigned(tmp_3_1_fu_146_p2),2));
    p_026_1_2_cast_fu_186_p1 <= std_logic_vector(resize(unsigned(p_026_1_2_fu_178_p3),3));
    p_026_1_2_fu_178_p3 <= 
        ap_const_lv2_2 when (tmp_3_2_fu_164_p2(0) = '1') else 
        p_026_1_1_cast_fu_160_p1;
    p_026_1_3_fu_210_p3 <= 
        ap_const_lv3_4 when (tmp_3_4_fu_204_p2(0) = '1') else 
        ap_const_lv3_3;
    p_026_1_4_fu_224_p3 <= 
        p_026_1_3_fu_210_p3 when (tmp_3_fu_218_p2(0) = '1') else 
        p_026_1_2_cast_fu_186_p1;
    p_030_1_1_fu_152_p3 <= 
        min_distances_1_V_i when (tmp_3_1_fu_146_p2(0) = '1') else 
        min_distances_0_V_i;
    p_030_1_2_fu_170_p3 <= 
        min_distances_2_V_i when (tmp_3_2_fu_164_p2(0) = '1') else 
        p_030_1_1_fu_152_p3;
    p_030_1_3_fu_196_p3 <= 
        min_distances_3_V_i when (tmp_3_3_fu_190_p2(0) = '1') else 
        p_030_1_2_fu_170_p3;
    tmp_1_fu_248_p2 <= "1" when (unsigned(distance_V_digitrec_bitcount_fu_125_ap_return) < unsigned(tmp_fu_232_p7)) else "0";
    tmp_3_1_fu_146_p2 <= "1" when (unsigned(min_distances_1_V_i) > unsigned(min_distances_0_V_i)) else "0";
    tmp_3_2_fu_164_p2 <= "1" when (unsigned(min_distances_2_V_i) > unsigned(p_030_1_1_fu_152_p3)) else "0";
    tmp_3_3_fu_190_p2 <= "1" when (unsigned(min_distances_3_V_i) > unsigned(p_030_1_2_fu_170_p3)) else "0";
    tmp_3_4_fu_204_p2 <= "1" when (unsigned(min_distances_4_V_i) > unsigned(p_030_1_3_fu_196_p3)) else "0";
    tmp_3_fu_218_p2 <= (tmp_3_4_fu_204_p2 or tmp_3_3_fu_190_p2);
    tmp_fu_232_p6 <= 
        p_026_1_3_fu_210_p3 when (tmp_3_fu_218_p2(0) = '1') else 
        p_026_1_2_cast_fu_186_p1;
    train_inst_V_cast_fu_135_p1 <= std_logic_vector(resize(unsigned(train_inst_V),49));
end behav;
